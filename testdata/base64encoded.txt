I2luY2x1ZGUgImJhc2U2NGRlY29kZS5oIgoKI2luY2x1ZGUgPGFzc2VydC5oPgoKI2luY2x1ZGUg
PHN0cmluZz4KI2luY2x1ZGUgPHZlY3Rvcj4KCnVzaW5nIHN0ZDo6c3RyaW5nOwp1c2luZyBzdGQ6
OnZlY3RvcjsKCnN0YXRpYyBjb25zdGV4cHIgY2hhciBrQWxwaGFiZXRbXSA9ICJBQkNERUZHSElK
S0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvIjsK
Y29uc3RleHByIGludDY0X3Qga0VtcHR5Q2hhciA9IC0xOwoKc3RyaW5nIGJhc2U2NGRlY29kZShj
b25zdCBzdHJpbmcmIGI2NCkgewogIHN0cmluZyBvdXRwdXQ7CiAgdmVjdG9yPGludDY0X3Q+IGxv
b2t1cCgyNTYpOwogIHNpemVfdCBpOwogIGZvciAoYXV0byYgdjogbG9va3VwKSB7IHYgPSBrRW1w
dHlDaGFyOyB9CiAgZm9yIChpID0gMDsgaSA8IHNpemVvZihrQWxwaGFiZXQpOyArK2kpIHsKICAg
IGxvb2t1cFtrQWxwaGFiZXRbaV1dID0gaTsKICB9CgogIGZvciAoc2l6ZV90IHBvc2l0aW9uID0g
MDsgcG9zaXRpb24gPCBiNjQuc2l6ZSgpOyApIHsKICAgIHVpbnQ2NF90IHJlc3VsdCA9IDA7CiAg
ICBpbnQgajsKICAgIGZvciAoaiA9IDA7IGogPCA0ICYmIHBvc2l0aW9uIDwgYjY0LnNpemUoKTsg
KytqKSB7CiAgICAgIGludDY0X3QgdCA9IDA7CiAgICAgIGRvIHsKCXQgPSBsb29rdXBbYjY0W3Bv
c2l0aW9uKytdXTsKICAgICAgfSB3aGlsZSAodCA9PSBrRW1wdHlDaGFyICYmIHBvc2l0aW9uIDwg
YjY0LnNpemUoKSk7CiAgICAgIGlmICh0ICE9IGtFbXB0eUNoYXIpIHsKCXJlc3VsdCB8PSAodCA8
PCAoKDMgLSBqKSAqIDYpKTsKICAgICAgfSBlbHNlIHsKCWJyZWFrOwogICAgICB9CiAgICB9CiAg
ICBmb3IgKGludCBrID0gMDsgayA8IGogLSAxOyArK2spIHsKICAgICAgY2hhciBjID0gY2hhcigo
cmVzdWx0ID4+ICgoMiAtIGspICogOCkpICYgMjU1KTsKICAgICAgb3V0cHV0ICs9IGM7CiAgICB9
CiAgfQogIHJldHVybiBvdXRwdXQ7Cn0K
